import { memo } from "react";
import React from "react";
import Admonition from "@theme/Admonition";
import styles from "./styles.module.css";
import Badge from "@site/src/components/Badges";
import Link from "@docusaurus/Link";
interface EntryFieldProps {
  name: string;
  children?: React.ReactNode;
  required?: boolean;
  inherited?: boolean;
  optional?: boolean;
  multiple?: boolean;
  deprecated?: boolean;
  colored?: boolean;
  multiline?: boolean;
  regex?: boolean;
  placeholders?: boolean;
  duration?: boolean;
  reference?: boolean;
  segment?: boolean;
}
export const RequiredBadge = memo(() => {
  console.log(window.globalCount++);
  return <Badge name="Required" color="#ff3838" />;
});
export const InheritedBadge = memo(() => {
  console.log(window.globalCount++);
  return <Badge name="Inherited" color="#a83dff" />;
});
export const OptionalBadge = memo(() => {
  console.log(window.globalCount++);
  return <Badge name="Optional" color="#3191f7" />;
});
export const MultipleBadge = memo(() => {
  console.log(window.globalCount++);
  return <Badge name="List" color="#20bf7c" />;
});
export const DeprecatedBadge = memo(() => {
  console.log(window.globalCount++);
  return <Badge name="Deprecated" color="#fa9d2a" />;
});
export const ColoredBadge = memo(() => {
  console.log(window.globalCount++);
  return <Badge name="Colored" color="#ff8e42" />;
});
export const MultiLineBadge = memo(() => {
  console.log(window.globalCount++);
  return <Badge name="Multi-Line" color="#b39e00" />;
});
export const RegexBadge = memo(() => {
  console.log(window.globalCount++);
  return <Badge name="Regex" color="#f731d6" />;
});
export const PlaceholdersBadge = memo(() => {
  console.log(window.globalCount++);
  return <Badge name="Placeholders" color="#00b300" />;
});
export const ReferenceBadge = memo(() => {
  console.log(window.globalCount++);
  return <Badge name="Reference" color="#b21fde" />;
});
export const SegmentBadge = memo(() => {
  console.log(window.globalCount++);
  return <Badge name="Segment" color="#1fde99" />;
});
export const EntryField = (props: EntryFieldProps) => {
  console.log(window.globalCount++);
  return (
    <div className={styles.entryField}>
      <div className={styles.header}>
        <h2 className={styles.name}>{props.name}</h2>
        {props.required && <RequiredBadge />}
        {props.inherited && <InheritedBadge />}
        {props.optional && <OptionalBadge />}
        {props.multiple && <MultipleBadge />}
        {props.deprecated && <DeprecatedBadge />}
        {props.colored && <ColoredBadge />}
        {props.multiline && <MultiLineBadge />}
        {props.regex && <RegexBadge />}
        {props.placeholders && <PlaceholdersBadge />}
        {props.reference && <ReferenceBadge />}
        {props.segment && <SegmentBadge />}
      </div>
      <div className="">
        {props.children}
        {props.colored && <ColorInfo />}
        {props.regex && <RegexInfo />}
        {props.placeholders && <PlaceholderInfo />}
        {props.duration && <DurationInfo />}
        {props.segment && <SegmentInfo />}
      </div>
    </div>
  );
};
export const CriteriaField = memo(() => {
  console.log(window.globalCount++);
  return (
    <EntryField name="Criteria" inherited multiple>
      A list of facts that must be met by the player before this entry can be
      triggered.
    </EntryField>
  );
});
export const ModifiersField = memo(() => {
  console.log(window.globalCount++);
  return (
    <EntryField name="Modifiers" inherited multiple>
      A list of facts that will be modified for the player when this entry is
      triggered.
    </EntryField>
  );
});
export const TriggersField = memo(() => {
  console.log(window.globalCount++);
  return (
    <EntryField name="Triggers" inherited multiple>
      A list of entries that will be triggered after this entry is triggered.
    </EntryField>
  );
});
export const SpeakerField = memo(() => {
  console.log(window.globalCount++);
  return (
    <EntryField name="Speaker" inherited>
      A reference to a speaker that will be used.
    </EntryField>
  );
});
export const CommentField = memo(() => {
  console.log(window.globalCount++);
  return (
    <EntryField name="Comment" optional inherited>
      A comment to keep track of what this fact is used for.
    </EntryField>
  );
});
export const DisplayNameField = memo(() => {
  console.log(window.globalCount++);
  return (
    <EntryField name="Display Name" required inherited>
      The display name of the speaker.
    </EntryField>
  );
});
export const SoundField = memo(() => {
  console.log(window.globalCount++);
  return (
    <EntryField name="Sound" required inherited>
      The sound that will be played when the speaker speaks.
    </EntryField>
  );
});

/**
 * @deprecated Should be individualy be generated by the documentation generator.
 */
export const ActionsField = memo(() => {
  console.log(window.globalCount++);
  return (
    <div>
      <CriteriaField />
      <ModifiersField />
      <TriggersField />
    </div>
  );
});

/**
 * @deprecated Should be individualy be generated by the documentation generator.
 */
export const FactsField = memo(() => {
  console.log(window.globalCount++);
  return (
    <div>
      <EntryField name="Comment" optional inherited>
        A comment to keep track of what this fact is used for.
      </EntryField>
    </div>
  );
});

/**
 * @deprecated Should be individualy be generated by the documentation generator.
 */
export const EventsField = memo(() => {
  console.log(window.globalCount++);
  return (
    <div>
      <TriggersField />
    </div>
  );
});

/**
 * @deprecated Should be individualy be generated by the documentation generator.
 */
export const SpeakersField = memo(() => {
  console.log(window.globalCount++);
  return (
    <div>
      <EntryField name="Display Name" required inherited>
        The display name of the speaker.
      </EntryField>
      <EntryField name="Sound" required inherited>
        The sound that will be played when the speaker speaks.
      </EntryField>
    </div>
  );
});
export const ColorInfo = memo(() => {
  console.log(window.globalCount++);
  return (
    <div>
      <br />
      Colors and formatting from the{" "}
      <Link to="https://docs.advntr.dev/minimessage/format.html">
        <code>MiniMessage Adventure Api</code>
      </Link>{" "}
      can be used. So for example, you can use{" "}
      <code>&lt;red&gt;Some Text&lt;/red&gt;</code> for red text.
    </div>
  );
});
export const PlaceholderInfo = memo(() => {
  console.log(window.globalCount++);
  return (
    <div>
      <br />
      Placeholders from the{" "}
      <Link to="https://github.com/PlaceholderAPI/PlaceholderAPI/wiki">
        <code>PlaceholderApi</code>
      </Link>{" "}
      can be used. So for example, you can use <code>%player_name%</code> for
      the player name.
    </div>
  );
});
export const DurationInfo = memo(() => {
  console.log(window.globalCount++);
  return (
    <div>
      <br />
      Durations can be specified in the following format:{" "}
      <code>1d 2h 3m 4s</code>. The following units are supported:{" "}
      <code>d</code> for days, <code>h</code> for hours,
      <code>m</code> for minutes and <code>s</code> for seconds.
    </div>
  );
});
export const RegexInfo = memo(() => {
  console.log(window.globalCount++);
  return (
    <div>
      <br />
      <Link to="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions">
        <code>Regular expressions</code>
      </Link>{" "}
      can be used to match a pattern. For example, <code>^.*$</code> will match
      any string.
    </div>
  );
});
export const ReadonlyFactInfo = memo(() => {
  console.log(window.globalCount++);
  return (
    <div>
      <br />
      This fact can only be <b>read</b>, not written to. Hence, it is only
      suitable for criteria.
    </div>
  );
});
export const SegmentInfo = memo(() => {
  console.log(window.globalCount++);
  return (
    <div>
      <br />
      Segments are time frames in a cinematic. During a segment can take actions
      or display information.
      <br />
      <Admonition type="info">
        Segments cannot overlap. If you need overlapping segments, create a new
        entry.
      </Admonition>
    </div>
  );
});
declare global {
  interface Window {
    globalCount: number;
  }
}
window.globalCount = window.globalCount || 0;
